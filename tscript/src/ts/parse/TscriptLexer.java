// Generated from Tscript.g by ANTLR 4.4

  package ts.parse;
  import ts.Location;
  import ts.tree.*;
  import static ts.parse.TreeBuilder.*;
  import java.util.List;
  import java.util.ArrayList;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TscriptLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		NUMERIC_LITERAL=1, STRING_LITERAL=2, BOOLEANL_LITERAL=3, NULLL_LITERAL=4, 
		NaN_LITERAL=5, LPAREN=6, RPAREN=7, SEMICOLON=8, EQUAL=9, PLUS=10, MINUS=11, 
		ASTERISK=12, SLASH=13, NOT=14, EQUALITY=15, SMALLER=16, LARGER=17, COMMA=18, 
		LBRACE=19, RBRACE=20, PRINT=21, VAR=22, TRY=23, BREAK=24, CONTINUE=25, 
		CATCH=26, FINALLY=27, THROW=28, IF=29, WHILE=30, ELSE=31, FUNCTION=32, 
		RETURN=33, IDENTIFIER=34, WhiteSpace=35;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'"
	};
	public static final String[] ruleNames = {
		"IdentifierCharacters", "SpaceTokens", "SpaceChars", "EndOfLineComment", 
		"LineTerminator", "DecimalDigit", "NonZeroDigit", "ExponentPart", "ExponentIndicator", 
		"SignedInteger", "HexIntegerLiteral", "HexDigit", "DecimalIntegerLiteral", 
		"DecimalDigits", "DecimalLiteral", "DoubleStringCharacters", "SingleStringCharacters", 
		"DoubleStringCharacter", "SingleStringCharacter", "LineContinuation", 
		"EscapeSequence", "CharacterEscapeSequence", "SingleEscapeCharacter", 
		"NonEscapeCharacter", "EscapeCharacter", "HexEscapeSequence", "UnicodeEscapeSequence", 
		"NUMERIC_LITERAL", "STRING_LITERAL", "BOOLEANL_LITERAL", "NULLL_LITERAL", 
		"NaN_LITERAL", "LPAREN", "RPAREN", "SEMICOLON", "EQUAL", "PLUS", "MINUS", 
		"ASTERISK", "SLASH", "NOT", "EQUALITY", "SMALLER", "LARGER", "COMMA", 
		"LBRACE", "RBRACE", "PRINT", "VAR", "TRY", "BREAK", "CONTINUE", "CATCH", 
		"FINALLY", "THROW", "IF", "WHILE", "ELSE", "FUNCTION", "RETURN", "IDENTIFIER", 
		"WhiteSpace"
	};


	  // grab location info (filename/line/column) from token
	  // in order to stick into AST nodes for later error reporting
	  public Location loc(final Token token)
	  {
	    return new Location(getSourceName(), token.getLine(),
	      token.getCharPositionInLine());
	  }

	  // a program is a list of statements
	  // i.e. root of AST is stored here
	  // set by the action for the start symbol
	  private List<Statement> semanticValue;
	  public List<Statement> getSemanticValue()
	  {
	    return semanticValue;
	  }


	public TscriptLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Tscript.g"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2%\u01c2\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\3\2\3\2\7\2\u0082\n\2\f\2\16\2\u0085\13\2\3\3\3\3\3\3\5\3"+
		"\u008a\n\3\3\4\3\4\3\5\3\5\3\5\3\5\7\5\u0092\n\5\f\5\16\5\u0095\13\5\3"+
		"\5\3\5\5\5\u0099\n\5\3\6\3\6\3\6\5\6\u009e\n\6\3\7\3\7\3\b\3\b\3\t\3\t"+
		"\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\5\13\u00ae\n\13\3\f\3\f\3\f\6\f"+
		"\u00b3\n\f\r\f\16\f\u00b4\3\r\3\r\3\16\3\16\3\16\7\16\u00bc\n\16\f\16"+
		"\16\16\u00bf\13\16\5\16\u00c1\n\16\3\17\3\17\3\17\3\17\5\17\u00c7\n\17"+
		"\3\20\3\20\3\20\7\20\u00cc\n\20\f\20\16\20\u00cf\13\20\3\20\7\20\u00d2"+
		"\n\20\f\20\16\20\u00d5\13\20\3\20\3\20\3\20\7\20\u00da\n\20\f\20\16\20"+
		"\u00dd\13\20\3\20\3\20\7\20\u00e1\n\20\f\20\16\20\u00e4\13\20\5\20\u00e6"+
		"\n\20\3\21\3\21\7\21\u00ea\n\21\f\21\16\21\u00ed\13\21\3\22\3\22\7\22"+
		"\u00f1\n\22\f\22\16\22\u00f4\13\22\3\23\3\23\3\23\3\23\5\23\u00fa\n\23"+
		"\3\24\3\24\3\24\3\24\5\24\u0100\n\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\5\26\u0109\n\26\3\27\3\27\5\27\u010d\n\27\3\30\3\30\3\31\3\31\3\32\3"+
		"\32\3\32\5\32\u0116\n\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\35\3\35\5\35\u0124\n\35\3\36\3\36\7\36\u0128\n\36\f\36\16\36\u012b"+
		"\13\36\3\36\3\36\3\36\7\36\u0130\n\36\f\36\16\36\u0133\13\36\3\36\5\36"+
		"\u0136\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0141\n"+
		"\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'"+
		"\3(\3(\3)\3)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61"+
		"\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\38\3"+
		"8\38\38\38\38\39\39\39\3:\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3?\6?\u01bd\n?\r?\16?\u01be\3"+
		"?\3?\2\2@\3\2\5\2\7\2\t\2\13\2\r\2\17\2\21\2\23\2\25\2\27\2\31\2\33\2"+
		"\35\2\37\2!\2#\2%\2\'\2)\2+\2-\2/\2\61\2\63\2\65\2\67\29\3;\4=\5?\6A\7"+
		"C\bE\tG\nI\13K\fM\rO\16Q\17S\20U\21W\22Y\23[\24]\25_\26a\27c\30e\31g\32"+
		"i\33k\34m\35o\36q\37s u!w\"y#{$}%\3\2%\6\2&&C\\aac|\7\2&&\62;C\\aac|\5"+
		"\2\13\13\16\16\"\"\4\2\f\f\17\17\3\2\62;\3\2\63;\4\2GGgg\3\2--\3\2//\3"+
		"\2\62\62\4\2ZZzz\5\2\62;CHch\3\2\60\60\6\2\f\f\17\17$$^^\3\2^^\6\2\f\f"+
		"\17\17))^^\13\2$$))^^ddhhppttvvxx\16\2\f\f\17\17$$))\62;^^ddhhppttvxz"+
		"z\4\2wwzz\3\2zz\3\2ww\3\2$$\3\2))\3\2**\3\2++\3\2==\3\2??\3\2,,\3\2\61"+
		"\61\3\2##\3\2>>\3\2@@\3\2..\3\2}}\3\2\177\177\u01ca\29\3\2\2\2\2;\3\2"+
		"\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2"+
		"\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U"+
		"\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2"+
		"\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2"+
		"\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{"+
		"\3\2\2\2\2}\3\2\2\2\3\177\3\2\2\2\5\u0089\3\2\2\2\7\u008b\3\2\2\2\t\u008d"+
		"\3\2\2\2\13\u009d\3\2\2\2\r\u009f\3\2\2\2\17\u00a1\3\2\2\2\21\u00a3\3"+
		"\2\2\2\23\u00a6\3\2\2\2\25\u00ad\3\2\2\2\27\u00af\3\2\2\2\31\u00b6\3\2"+
		"\2\2\33\u00c0\3\2\2\2\35\u00c6\3\2\2\2\37\u00e5\3\2\2\2!\u00e7\3\2\2\2"+
		"#\u00ee\3\2\2\2%\u00f9\3\2\2\2\'\u00ff\3\2\2\2)\u0101\3\2\2\2+\u0108\3"+
		"\2\2\2-\u010c\3\2\2\2/\u010e\3\2\2\2\61\u0110\3\2\2\2\63\u0115\3\2\2\2"+
		"\65\u0117\3\2\2\2\67\u011b\3\2\2\29\u0123\3\2\2\2;\u0135\3\2\2\2=\u0140"+
		"\3\2\2\2?\u0142\3\2\2\2A\u0147\3\2\2\2C\u014b\3\2\2\2E\u014d\3\2\2\2G"+
		"\u014f\3\2\2\2I\u0151\3\2\2\2K\u0153\3\2\2\2M\u0155\3\2\2\2O\u0157\3\2"+
		"\2\2Q\u0159\3\2\2\2S\u015b\3\2\2\2U\u015d\3\2\2\2W\u0160\3\2\2\2Y\u0162"+
		"\3\2\2\2[\u0164\3\2\2\2]\u0166\3\2\2\2_\u0168\3\2\2\2a\u016a\3\2\2\2c"+
		"\u0170\3\2\2\2e\u0174\3\2\2\2g\u0178\3\2\2\2i\u017e\3\2\2\2k\u0187\3\2"+
		"\2\2m\u018d\3\2\2\2o\u0195\3\2\2\2q\u019b\3\2\2\2s\u019e\3\2\2\2u\u01a4"+
		"\3\2\2\2w\u01a9\3\2\2\2y\u01b2\3\2\2\2{\u01b9\3\2\2\2}\u01bc\3\2\2\2\177"+
		"\u0083\t\2\2\2\u0080\u0082\t\3\2\2\u0081\u0080\3\2\2\2\u0082\u0085\3\2"+
		"\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084\4\3\2\2\2\u0085\u0083"+
		"\3\2\2\2\u0086\u008a\5\7\4\2\u0087\u008a\5\13\6\2\u0088\u008a\5\t\5\2"+
		"\u0089\u0086\3\2\2\2\u0089\u0087\3\2\2\2\u0089\u0088\3\2\2\2\u008a\6\3"+
		"\2\2\2\u008b\u008c\t\4\2\2\u008c\b\3\2\2\2\u008d\u008e\7\61\2\2\u008e"+
		"\u008f\7\61\2\2\u008f\u0093\3\2\2\2\u0090\u0092\n\5\2\2\u0091\u0090\3"+
		"\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094\3\2\2\2\u0094"+
		"\u0098\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0099\5\13\6\2\u0097\u0099\7"+
		"\2\2\3\u0098\u0096\3\2\2\2\u0098\u0097\3\2\2\2\u0099\n\3\2\2\2\u009a\u009b"+
		"\7\17\2\2\u009b\u009e\7\f\2\2\u009c\u009e\t\5\2\2\u009d\u009a\3\2\2\2"+
		"\u009d\u009c\3\2\2\2\u009e\f\3\2\2\2\u009f\u00a0\t\6\2\2\u00a0\16\3\2"+
		"\2\2\u00a1\u00a2\t\7\2\2\u00a2\20\3\2\2\2\u00a3\u00a4\5\23\n\2\u00a4\u00a5"+
		"\5\25\13\2\u00a5\22\3\2\2\2\u00a6\u00a7\t\b\2\2\u00a7\24\3\2\2\2\u00a8"+
		"\u00ae\5\35\17\2\u00a9\u00aa\t\t\2\2\u00aa\u00ae\5\35\17\2\u00ab\u00ac"+
		"\t\n\2\2\u00ac\u00ae\5\35\17\2\u00ad\u00a8\3\2\2\2\u00ad\u00a9\3\2\2\2"+
		"\u00ad\u00ab\3\2\2\2\u00ae\26\3\2\2\2\u00af\u00b0\t\13\2\2\u00b0\u00b2"+
		"\t\f\2\2\u00b1\u00b3\5\31\r\2\u00b2\u00b1\3\2\2\2\u00b3\u00b4\3\2\2\2"+
		"\u00b4\u00b2\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\30\3\2\2\2\u00b6\u00b7"+
		"\t\r\2\2\u00b7\32\3\2\2\2\u00b8\u00c1\t\13\2\2\u00b9\u00bd\5\17\b\2\u00ba"+
		"\u00bc\5\35\17\2\u00bb\u00ba\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3"+
		"\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2\u00c0"+
		"\u00b8\3\2\2\2\u00c0\u00b9\3\2\2\2\u00c1\34\3\2\2\2\u00c2\u00c7\5\r\7"+
		"\2\u00c3\u00c4\5\r\7\2\u00c4\u00c5\5\35\17\2\u00c5\u00c7\3\2\2\2\u00c6"+
		"\u00c2\3\2\2\2\u00c6\u00c3\3\2\2\2\u00c7\36\3\2\2\2\u00c8\u00c9\5\33\16"+
		"\2\u00c9\u00cd\t\16\2\2\u00ca\u00cc\5\35\17\2\u00cb\u00ca\3\2\2\2\u00cc"+
		"\u00cf\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d3\3\2"+
		"\2\2\u00cf\u00cd\3\2\2\2\u00d0\u00d2\5\21\t\2\u00d1\u00d0\3\2\2\2\u00d2"+
		"\u00d5\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00e6\3\2"+
		"\2\2\u00d5\u00d3\3\2\2\2\u00d6\u00d7\t\16\2\2\u00d7\u00db\5\35\17\2\u00d8"+
		"\u00da\5\21\t\2\u00d9\u00d8\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9\3"+
		"\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00e6\3\2\2\2\u00dd\u00db\3\2\2\2\u00de"+
		"\u00e2\5\33\16\2\u00df\u00e1\5\21\t\2\u00e0\u00df\3\2\2\2\u00e1\u00e4"+
		"\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4"+
		"\u00e2\3\2\2\2\u00e5\u00c8\3\2\2\2\u00e5\u00d6\3\2\2\2\u00e5\u00de\3\2"+
		"\2\2\u00e6 \3\2\2\2\u00e7\u00eb\5%\23\2\u00e8\u00ea\5!\21\2\u00e9\u00e8"+
		"\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec"+
		"\"\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\u00f2\5\'\24\2\u00ef\u00f1\5#\22"+
		"\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3"+
		"\3\2\2\2\u00f3$\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00fa\n\17\2\2\u00f6"+
		"\u00f7\t\20\2\2\u00f7\u00fa\5+\26\2\u00f8\u00fa\5)\25\2\u00f9\u00f5\3"+
		"\2\2\2\u00f9\u00f6\3\2\2\2\u00f9\u00f8\3\2\2\2\u00fa&\3\2\2\2\u00fb\u0100"+
		"\n\21\2\2\u00fc\u00fd\t\20\2\2\u00fd\u0100\5+\26\2\u00fe\u0100\5)\25\2"+
		"\u00ff\u00fb\3\2\2\2\u00ff\u00fc\3\2\2\2\u00ff\u00fe\3\2\2\2\u0100(\3"+
		"\2\2\2\u0101\u0102\t\20\2\2\u0102\u0103\5\13\6\2\u0103*\3\2\2\2\u0104"+
		"\u0109\5-\27\2\u0105\u0109\t\13\2\2\u0106\u0109\5\65\33\2\u0107\u0109"+
		"\5\67\34\2\u0108\u0104\3\2\2\2\u0108\u0105\3\2\2\2\u0108\u0106\3\2\2\2"+
		"\u0108\u0107\3\2\2\2\u0109,\3\2\2\2\u010a\u010d\5/\30\2\u010b\u010d\5"+
		"\61\31\2\u010c\u010a\3\2\2\2\u010c\u010b\3\2\2\2\u010d.\3\2\2\2\u010e"+
		"\u010f\t\22\2\2\u010f\60\3\2\2\2\u0110\u0111\n\23\2\2\u0111\62\3\2\2\2"+
		"\u0112\u0116\5/\30\2\u0113\u0116\5\r\7\2\u0114\u0116\t\24\2\2\u0115\u0112"+
		"\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0114\3\2\2\2\u0116\64\3\2\2\2\u0117"+
		"\u0118\t\25\2\2\u0118\u0119\5\31\r\2\u0119\u011a\5\31\r\2\u011a\66\3\2"+
		"\2\2\u011b\u011c\t\26\2\2\u011c\u011d\5\31\r\2\u011d\u011e\5\31\r\2\u011e"+
		"\u011f\5\31\r\2\u011f\u0120\5\31\r\2\u01208\3\2\2\2\u0121\u0124\5\37\20"+
		"\2\u0122\u0124\5\27\f\2\u0123\u0121\3\2\2\2\u0123\u0122\3\2\2\2\u0124"+
		":\3\2\2\2\u0125\u0129\t\27\2\2\u0126\u0128\5%\23\2\u0127\u0126\3\2\2\2"+
		"\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c"+
		"\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u0136\t\27\2\2\u012d\u0131\t\30\2\2"+
		"\u012e\u0130\5#\22\2\u012f\u012e\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f"+
		"\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\3\2\2\2\u0133\u0131\3\2\2\2\u0134"+
		"\u0136\t\30\2\2\u0135\u0125\3\2\2\2\u0135\u012d\3\2\2\2\u0136<\3\2\2\2"+
		"\u0137\u0138\7v\2\2\u0138\u0139\7t\2\2\u0139\u013a\7w\2\2\u013a\u0141"+
		"\7g\2\2\u013b\u013c\7h\2\2\u013c\u013d\7c\2\2\u013d\u013e\7n\2\2\u013e"+
		"\u013f\7u\2\2\u013f\u0141\7g\2\2\u0140\u0137\3\2\2\2\u0140\u013b\3\2\2"+
		"\2\u0141>\3\2\2\2\u0142\u0143\7p\2\2\u0143\u0144\7w\2\2\u0144\u0145\7"+
		"n\2\2\u0145\u0146\7n\2\2\u0146@\3\2\2\2\u0147\u0148\7P\2\2\u0148\u0149"+
		"\7c\2\2\u0149\u014a\7P\2\2\u014aB\3\2\2\2\u014b\u014c\t\31\2\2\u014cD"+
		"\3\2\2\2\u014d\u014e\t\32\2\2\u014eF\3\2\2\2\u014f\u0150\t\33\2\2\u0150"+
		"H\3\2\2\2\u0151\u0152\t\34\2\2\u0152J\3\2\2\2\u0153\u0154\t\t\2\2\u0154"+
		"L\3\2\2\2\u0155\u0156\t\n\2\2\u0156N\3\2\2\2\u0157\u0158\t\35\2\2\u0158"+
		"P\3\2\2\2\u0159\u015a\t\36\2\2\u015aR\3\2\2\2\u015b\u015c\t\37\2\2\u015c"+
		"T\3\2\2\2\u015d\u015e\t\34\2\2\u015e\u015f\t\34\2\2\u015fV\3\2\2\2\u0160"+
		"\u0161\t \2\2\u0161X\3\2\2\2\u0162\u0163\t!\2\2\u0163Z\3\2\2\2\u0164\u0165"+
		"\t\"\2\2\u0165\\\3\2\2\2\u0166\u0167\t#\2\2\u0167^\3\2\2\2\u0168\u0169"+
		"\t$\2\2\u0169`\3\2\2\2\u016a\u016b\7r\2\2\u016b\u016c\7t\2\2\u016c\u016d"+
		"\7k\2\2\u016d\u016e\7p\2\2\u016e\u016f\7v\2\2\u016fb\3\2\2\2\u0170\u0171"+
		"\7x\2\2\u0171\u0172\7c\2\2\u0172\u0173\7t\2\2\u0173d\3\2\2\2\u0174\u0175"+
		"\7v\2\2\u0175\u0176\7t\2\2\u0176\u0177\7{\2\2\u0177f\3\2\2\2\u0178\u0179"+
		"\7d\2\2\u0179\u017a\7t\2\2\u017a\u017b\7g\2\2\u017b\u017c\7c\2\2\u017c"+
		"\u017d\7m\2\2\u017dh\3\2\2\2\u017e\u017f\7e\2\2\u017f\u0180\7q\2\2\u0180"+
		"\u0181\7p\2\2\u0181\u0182\7v\2\2\u0182\u0183\7k\2\2\u0183\u0184\7p\2\2"+
		"\u0184\u0185\7w\2\2\u0185\u0186\7g\2\2\u0186j\3\2\2\2\u0187\u0188\7e\2"+
		"\2\u0188\u0189\7c\2\2\u0189\u018a\7v\2\2\u018a\u018b\7e\2\2\u018b\u018c"+
		"\7j\2\2\u018cl\3\2\2\2\u018d\u018e\7h\2\2\u018e\u018f\7k\2\2\u018f\u0190"+
		"\7p\2\2\u0190\u0191\7c\2\2\u0191\u0192\7n\2\2\u0192\u0193\7n\2\2\u0193"+
		"\u0194\7{\2\2\u0194n\3\2\2\2\u0195\u0196\7v\2\2\u0196\u0197\7j\2\2\u0197"+
		"\u0198\7t\2\2\u0198\u0199\7q\2\2\u0199\u019a\7y\2\2\u019ap\3\2\2\2\u019b"+
		"\u019c\7k\2\2\u019c\u019d\7h\2\2\u019dr\3\2\2\2\u019e\u019f\7y\2\2\u019f"+
		"\u01a0\7j\2\2\u01a0\u01a1\7k\2\2\u01a1\u01a2\7n\2\2\u01a2\u01a3\7g\2\2"+
		"\u01a3t\3\2\2\2\u01a4\u01a5\7g\2\2\u01a5\u01a6\7n\2\2\u01a6\u01a7\7u\2"+
		"\2\u01a7\u01a8\7g\2\2\u01a8v\3\2\2\2\u01a9\u01aa\7h\2\2\u01aa\u01ab\7"+
		"w\2\2\u01ab\u01ac\7p\2\2\u01ac\u01ad\7e\2\2\u01ad\u01ae\7v\2\2\u01ae\u01af"+
		"\7k\2\2\u01af\u01b0\7q\2\2\u01b0\u01b1\7p\2\2\u01b1x\3\2\2\2\u01b2\u01b3"+
		"\7t\2\2\u01b3\u01b4\7g\2\2\u01b4\u01b5\7v\2\2\u01b5\u01b6\7w\2\2\u01b6"+
		"\u01b7\7t\2\2\u01b7\u01b8\7p\2\2\u01b8z\3\2\2\2\u01b9\u01ba\5\3\2\2\u01ba"+
		"|\3\2\2\2\u01bb\u01bd\5\5\3\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2"+
		"\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1"+
		"\b?\2\2\u01c1~\3\2\2\2\37\2\u0083\u0089\u0093\u0098\u009d\u00ad\u00b4"+
		"\u00bd\u00c0\u00c6\u00cd\u00d3\u00db\u00e2\u00e5\u00eb\u00f2\u00f9\u00ff"+
		"\u0108\u010c\u0115\u0123\u0129\u0131\u0135\u0140\u01be\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}